public class Bfs_domain {
	
	static int[][] map = null;
	static int size; 
	static Queue<Integer> queueX = new LinkedList<Integer>();
	static Queue<Integer> queueY = new LinkedList<Integer>();
	static int directionX[] = {0,1,-1,0};
	static int directionY[] = {1,0,0,-1};
	static int count = 0;
	static ArrayList<Integer> domainList = new ArrayList<Integer>();

	public static void main(String[] args) {
		//입력
		Scanner sc = new Scanner(System.in);
		int N = Integer.parseInt(sc.nextLine()); //배열의 크기 NxN
		map = new int[N][N];
		queueX = new LinkedList<Integer>();
		queueY = new LinkedList<Integer>();
		
		for (int i = 0; i < N; i++) {
			String line = sc.nextLine();
			String[] num = line.split("\\s");
			
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(num[j]);
			}
		}
		
		//bfs 탐색   
	    for(int i=0; i<size; i++) {

	        for(int j=0; j<size; j++) {

	            if(map[i][j] == 1){
	                bfs(i,j);
	            }

	        }

	    }
	    
	    //정답 출력
	    System.out.println(count);;
	    Collections.sort(domainList);
	    for(int i=0; i<domainList.size(); i++)
	    {
	        System.out.print(domainList.get(i)+" ");
	    }

	}

	public static void bfs(int x, int y) {
		
		map[x][y] = -1;
		queueX.offer(x);
		queueY.offer(y);
		int area = 0;
		
		while(!queueX.isEmpty()){
			
			int xx = queueX.poll();
			int yy = queueY.poll();

			area++;
			
			for(int i = 0 ; i < 4; i++){
				
				int nextX = xx + directionX[i];
				int nextY = yy + directionY[i];
				
				if(nextX >= 0 && nextX < size && nextY >= 0 && nextY < size  
						&& map[nextX][nextY] == 1){
					queueX.offer(nextX);
					queueY.offer(nextY);
					map[nextX][nextY] = -1;
				}
				
			}
			
		}
				
		domainList.add(area);
		count++;
		
	}

}
