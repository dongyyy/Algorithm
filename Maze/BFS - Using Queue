미로찾기 - Queue 이용

BFS(Breath First Search) 방식

동심원 형태로 탐색(출발점으로 1칸 떨어진 곳 모두 탐색, 2칸 떨어진 곳 탐색,,,)

최단거리 구하기 용이

각 칸에 출구로부터 몇 칸을 이동했는지 기록해두면 최단거리를 편하게 구할 수 있음


<template>
1. 하나의 큐를 만든다.
2. 위치 (0,0)은 이미 방문한 위치임을 표시하고, 큐에 위치 (0,0)을 넣는다.
3. 큐가 빌 때 까지 다음을 반복한다.
   - 큐에서 하나의 위치 p를 꺼낸다. 
   - p에서 한 칸 떨어진 위치들 중 이동 가능하면서 아직 방문하지 않은 모든 위치들을 방문된 위치임을 표시하고 큐에 넣는다.
   - 만약 그 위치가 출구라면 종료한다.

백준 : https://www.acmicpc.net/problem/2178
권오흠 : https://www.youtube.com/watch?v=16SLOYDCYuc


import java.util.LinkedList;
import java.util.Queue;

public class Maze {
	
    static int[][] map = {
			{1,0,1,1,1,1},
			{1,0,1,0,1,0},
			{1,0,1,0,1,1},
			{1,1,1,0,1,1}
	};
    
    static int M = 4;	//세로
    static int N = 6;	//가로     
    
    static boolean[][] 	visited = new boolean[M][N]; //방문 여부 확인
  
	public static void main(String[] args) {
		
		bfs(0,0);
		
	}
	
	static public void bfs(int x, int y) {
		int dx[] = {1,0,-1,0};
		int dy[] = {0,1,0,-1};
		
		Queue<Point> queue = new LinkedList<>();
		
		queue.offer(new Point(0,0,1));
		visited[0][0] = true;
		
		while(!queue.isEmpty()) {
			Point point = queue.poll();
			if(point.x == M-1 && point.y == N-1) { //도착지
				System.out.println(point.depth);
				return;
			}
			
			for(int i = 0 ; i < 4 ; i++) {
				int xx = dx[i] + point.x;
				int yy = dy[i] + point.y;
				
				//맵 범위 안, 방문한적 없는, 길 
				if(xx >= 0 && xx < M && yy >= 0 && yy < N
						&& visited[xx][yy] == false
						&& map[xx][yy] == 1) {
					visited[xx][yy] = true;
					int p = point.depth + 1;
//					System.out.println(xx + " " + yy + " " + p);
					queue.offer(new Point(xx, yy, point.depth + 1));
				}
			}
		}
	}
	
	static class Point{
		int x, y, depth;
		Point(int x, int y, int depth){
			this.x = x;
			this.y = y;
			this.depth = depth;
		}
	}

}
