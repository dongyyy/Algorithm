public class Maze {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

	static public class MazeCase {
		private static int N = 8;
		private static int [][] maze = {
				{0,0,0,0,0,0,0,1},
				{0,1,1,0,1,1,0,1},
				{0,0,0,1,0,0,0,1},
				{0,1,0,0,1,1,0,0},
				{0,1,1,1,0,0,1,1},
				{0,1,0,0,0,1,0,1},
				{0,0,0,1,0,0,0,1},
				{0,1,1,1,0,1,0,0}		
		};
		
		private static final int PATHWAY_COLOR = 0; //white
		private static final int WALL_COLOR = 1; //blue
		private static final int BLOCKED_COLOR = 2; //red
		private static final int PATH_COLOR = 3; //green
	}

//Base Case
//Base Case 1.
//좌표가 유효하지 않다면 return false
//Base Case 2.
//이미 방문한 셀이라면 return false
//Base Case 3.
//출구 셀이라면 방문한 셀 표시 후 return true

//Recursive Case
//나머지 일반적인 경우,
//방문한 셀로 표시하고
//현재 셀에 인접한 4개의 셀에 대해 다시 재귀 호출

	public static boolean findMazePath(int x, int y) {
		if(x < 0 || y < 0 || x >= N || y >= N) return false;
		else if(maze[x][y] != PATHWAY_COLOR) return false;
		else if( x == N-1 && y == N-1) {
			maze[x][y] = PATH_COLOR;
			return true;
		}
		else {
			maze[x][y] = PATH_COLOR;
			if(findMazePath(x-1, y) || findMazePath(x, y+1) 
					|| findMazePath(x + 1, y) || findMazePath(x, y-1)) {
				return true;
			}
			maze[x][y] = BLOCKED_COLOR // dead end
			return false;
		}
	}

}
